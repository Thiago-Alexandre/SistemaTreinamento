package com.treinamento.util;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import com.treinamento.model.EspacoCafe;
import com.treinamento.model.Etapa;
import com.treinamento.model.Pessoa;
import com.treinamento.model.PessoaEspaco;
import com.treinamento.model.PessoaSala;
import com.treinamento.model.Sala;
import com.treinamento.repository.EspacoCafeRepository;
import com.treinamento.repository.EtapaRepository;
import com.treinamento.repository.PessoaEspacoRepository;
import com.treinamento.repository.PessoaRepository;
import com.treinamento.repository.PessoaSalaRepository;
import com.treinamento.repository.SalaRepository;

public class ControleLotacao {

	private final PessoaRepository pessoaRepository;
	private final SalaRepository salaRepository;
	private final EspacoCafeRepository espacoRepository;
	private final EtapaRepository etapaRepository;
	private final PessoaSalaRepository pessoaSalaRepository;
	private final PessoaEspacoRepository pessoaEspacoRepository;

	@Autowired
    public ControleLotacao(
    						PessoaRepository pessoaRepository, 
    						SalaRepository salaRepository, 
    						EspacoCafeRepository espacoRepository, 
    						EtapaRepository etapaRepository,
    						PessoaSalaRepository pessoaSalaRepository,
    						PessoaEspacoRepository pessoaEspacoRepository) {
        this.pessoaRepository = pessoaRepository;
        this.salaRepository = salaRepository;
        this.espacoRepository = espacoRepository;
        this.etapaRepository = etapaRepository;
		this.pessoaSalaRepository = pessoaSalaRepository;
		this.pessoaEspacoRepository = pessoaEspacoRepository;
    }
	
	/**
	 * Método para definir a sala e o espaço de café de cada pessoa em cada etapa.
	 * Primeiro, deverá ser pesquisado todas as pessoas, etapas, salas e espaços cadastrados.
	 * Depois, deverá ser verificado se existe pelo menos um objeto de cada uma dessas classes.
	 * Caso alguma classe não possuir objetos cadastrados ainda, o processo não poderá ser executado.
	 * Em caso positivo, o processo inicia definindo a sala e o espaço de cada pessoa na primeira etapa.
	 * Para isso, deve-se encontrar o valor mínimo de pessoas possível para cada sala e espaço.
	 * Então, distribuir as pessoas nas salas e espaços nessa quantidade mínima.
	 * Depois, pegar o resto das pessoas e distribuir cada uma em uma sala e espaço diferente.
	 * Com a primeira etapa definida, pode-se realizar o processo de distribuição das próximas etapas.
	 * 
	 */
	public void atualizarLotacao() {
		List<Pessoa> pessoas = pessoaRepository.findAll();
		List<Sala> salas = salaRepository.findAll();
		List<EspacoCafe> espacos = espacoRepository.findAll();
		List<Etapa> etapas = etapaRepository.findAll();
		if(pessoas.size() > 0 && salas.size() > 0 && espacos.size() > 0 && etapas.size() > 0) {
			int indiceEtapa = 0;
			int lotacaoMinPorEspaco = (int) (pessoas.size() / espacos.size());
			int qtdPessoas = 0;
			for(int indiceEspaco = 0; indiceEspaco < espacos.size(); indiceEspaco++) {
				for(int indicePessoa = 0; indicePessoa < lotacaoMinPorEspaco; indicePessoa++) {
					PessoaEspaco pe = new PessoaEspaco();
					pe.setEtapa(etapas.get(indiceEtapa));
					pe.setPessoa(pessoas.get(indicePessoa + qtdPessoas));
					pe.setEspaco(espacos.get(indiceEspaco));
					pessoaEspacoRepository.save(PessoaEspaco);
				}
				qtdPessoas += lotacaoMinPorEspaco;
			}
			for(int i = 0; i < pessoas.size() % espacos.size(); i++) {
				PessoaEspaco pe = new PessoaEspaco();
				pe.setEtapa(etapas.get(indiceEtapa));
				pe.setPessoa(pessoas.get(i + qtdPessoas));
				pe.setEspaco(espacos.get(i));
				//
			}
			int lotacaoMinPorSala = (int) (pessoas.size() / salas.size());
			qtdPessoas = 0;
			for(int indiceSala = 0; indiceSala < salas.size(); indiceSala++) {
				for(int indicePessoa = 0; indicePessoa < lotacaoMinPorSala; indicePessoa++) {
					PessoaSala ps = new PessoaSala();
					ps.setEtapa(etapas.get(indiceEtapa));
					ps.setPessoa(pessoas.get(indicePessoa + qtdPessoas));
					ps.setSala(salas.get(indiceSala));
					//
				}
				qtdPessoas += lotacaoMinPorSala;
			}
			for(int i = 0; i < pessoas.size() % salas.size(); i++) {
				PessoaSala ps = new PessoaSala();
				ps.setEtapa(etapas.get(indiceEtapa));
				ps.setPessoa(pessoas.get(i + qtdPessoas));
				ps.setSala(salas.get(i));
				//
			}
			
			for(indiceEtapa = 1; indiceEtapa < etapas.size(); indiceEtapa++) {
				
			}
		}
		
	}
}