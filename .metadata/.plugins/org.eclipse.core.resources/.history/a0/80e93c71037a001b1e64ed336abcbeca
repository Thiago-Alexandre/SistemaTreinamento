package com.treinamento.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.treinamento.dto.SalaDetalhesDTO;
import com.treinamento.dto.SalaParaSalvarDTO;
import com.treinamento.dto.SalaRespostaDTO;
import com.treinamento.dto.PessoasPorEtapaDTO;
import com.treinamento.dto.PosicoesPorEtapaDTO;
import com.treinamento.model.Etapa;
import com.treinamento.model.Pessoa;
import com.treinamento.model.Sala;
import com.treinamento.model.PessoaEspaco;
import com.treinamento.model.PessoaSala;
import com.treinamento.repository.EtapaRepository;
import com.treinamento.repository.PessoaEspacoRepository;
import com.treinamento.repository.PessoaSalaRepository;
import com.treinamento.service.SalaService;

@RequestMapping("/SistemaTreinamento")
@RestController
public class SalaController {

	private final SalaService salaService;
	private final EtapaRepository etapaRepository;
	private final PessoaSalaRepository pessoaSalaRepository;

	@Autowired
    public SalaController(SalaService salaService, 
    						EtapaRepository etapaRepository,
    						PessoaSalaRepository pessoaSalaRepository) {
        this.salaService = salaService;
        this.etapaRepository = etapaRepository;
        this.pessoaSalaRepository = pessoaSalaRepository;
    }
	
	@PostMapping(value="/sala")
    public ResponseEntity<SalaRespostaDTO> salvar(@RequestBody @Valid SalaParaSalvarDTO dto) {
        Sala sala = salaService.salvar(dto.gerarSala());
        Integer lotacao = 0;
        Optional<Etapa> etapa = etapaRepository.findById(0l);
        if(etapa.isPresent()) {
        	lotacao = pessoaSalaRepository.findByEtapaAndSala(etapa.get(), sala).size();
        }
        return new ResponseEntity<>(new SalaRespostaDTO(sala, lotacao), HttpStatus.CREATED);
    }
	
	@GetMapping(value="/sala/{id}")
	public ResponseEntity<SalaDetalhesDTO> pesquisar(@PathVariable Long id) {
		Sala sala = salaService.pesquisar(id);
        if(sala.getId() != null) {
        	List<PessoasPorEtapaDTO> pessoasPorEtapa = new ArrayList<PessoasPorEtapaDTO>();
        	List<Etapa> etapas = etapaRepository.findAll();
        	for(int i = 0; i < etapas.size(); i++) {
        		List<PessoaSala> pessoasPorSala = pessoaSalaRepository.findByEtapaAndSala(etapas.get(i), sala);
        		List<Pessoa> pessoas = new ArrayList<Pessoa>();
        		for(int j = 0; j < pessoasPorSala.size(); j++) {
        			pessoas.add(pessoasPorSala.get(j).getPessoa());
        		}
        		pessoasPorEtapa.add(new PessoasPorEtapaDTO(etapas.get(i), pessoas));
        	}
        	return new ResponseEntity<>(new SalaDetalhesDTO(sala, pessoasPorEtapa), HttpStatus.OK);
        }
        return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	}
	
	@GetMapping(value="/sala")
	public ResponseEntity<List<SalaRespostaDTO>> listar() {
		List<SalaRespostaDTO> salas = salaService.listar();
        if(salas.isEmpty()) {
            return new ResponseEntity<>(salas, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<>(salas, HttpStatus.OK);
	}
}